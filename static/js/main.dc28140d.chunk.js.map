{"version":3,"sources":["util/Spotify.js","Components/SearchBar/SearchBar.js","Components/Track/Track.js","Components/TrackList/TrackList.js","Components/SearchResults/SearchResults.js","Components/Playlist/Playlist.js","Components/App/App.js","reportWebVitals.js","index.js"],"names":["accessToken","SearchBar","props","search","bind","handleTermChange","state","term","this","onSearch","e","setState","target","value","className","placeholder","onChange","onClick","React","Component","Track","addTrack","removeTrack","isRemoval","onAdd","track","onRemove","Name","Artist","Album","renderAction","TrackList","tracks","map","ID","SearchResults","searchResults","Playlist","handleNameChange","name","onNameChange","defaultValue","playlistTracks","onSave","Spotify","getAccessToken","accessTokenMatch","window","location","href","match","expiresInMatch","expiresIn","Number","setTimeout","history","pushState","accessUrl","fetch","headers","Authorization","then","response","json","jsonResponse","items","id","artists","album","URI","uri","savePlaylist","trackUris","length","userId","method","body","JSON","stringify","playlistId","uris","catch","console","log","App","playlistName","updatePlaylistName","find","element_in_object","push","pop","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.dc28140d.chunk.js","sourcesContent":["const clientId = \"2a0d936d36c146cea588731a6f9b9977\";\nconst redirectUri = \"http://localhost:3000/\";\nlet accessToken;\n\nconst Spotify = {\n  getAccessToken() {\n    if (accessToken) {\n      return accessToken;\n    }\n\n    // check for access token match\n    const accessTokenMatch = window.location.href.match(/access_token=([^&]*)/);\n    const expiresInMatch = window.location.href.match(/expires_in=([^&]*)/);\n\n    if (accessTokenMatch && expiresInMatch) {\n      accessToken = accessTokenMatch[1];\n      const expiresIn = Number(expiresInMatch[1]);\n      //clear parameters and allow to get a new token when it expires.\n      window.setTimeout(() => (accessToken = \"\"), expiresIn * 1000);\n      window.history.pushState(\"Access Token\", null, \"/\");\n      return accessToken;\n    } else {\n      const accessUrl = `https://accounts.spotify.com/authorize?client_id=${clientId}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirectUri}`;\n      window.location = accessUrl;\n    }\n  },\n\n  search(term) {\n    const accessToken = Spotify.getAccessToken();\n    return fetch(`https://api.spotify.com/v1/search?type=track&q=${term}`, {\n      headers: {\n        Authorization: \"Bearer \" + accessToken,\n      },\n    })\n      .then((response) => {\n        return response.json();\n      })\n      .then((jsonResponse) => {\n        if (!jsonResponse.tracks) {\n          return [];\n        }\n        return jsonResponse.tracks.items.map((track) => ({\n          ID: track.id,\n          Name: track.name,\n          Artist: track.artists[0].name,\n          Album: track.album.name,\n          URI: track.uri,\n        }));\n      });\n  },\n\n  savePlaylist(name, trackUris) {\n    if (!name || !trackUris.length) {\n      return;\n    }\n\n    const accessToken = Spotify.getAccessToken();\n    const headers = { Authorization: `Bearer ${accessToken}` };\n    let userId;\n\n    return fetch(\"https://api.spotify.com/v1/me\", { headers: headers })\n      .then((response) => response.json())\n      .then((jsonResponse) => {\n        userId = jsonResponse.id;\n        return fetch(`https://api.spotify.com/v1/users/${userId}/playlists`, {\n          headers: headers,\n          method: \"POST\",\n          body: JSON.stringify({ name: name }),\n        });\n      })\n      .then((response) => response.json())\n      .then((jsonResponse) => {\n        const playlistId = jsonResponse.id;\n        return fetch(`https://api.spotify.com/v1/users/${userId}/playlists/${playlistId}/tracks`, {\n          headers: headers,\n          method: \"POST\",\n          body: JSON.stringify({ uris: trackUris }),\n        });\n      }).catch(e => console.log(\"I'm over here you faggot hahahahahaha\"));\n  },\n};\n\nexport default Spotify;\n","import React from \"react\";\nimport \"./SearchBar.css\";\n\nexport class SearchBar extends React.Component {\n  constructor(props) {\n    super(props);\n    this.search = this.search.bind(this);\n    this.handleTermChange = this.handleTermChange.bind(this);\n    this.state = {\n      term: \"\",\n    };\n  }\n\n  search() {\n    this.props.onSearch(this.state.term);\n  }\n\n  handleTermChange(e) {\n    this.setState({\n      term: e.target.value,\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"SearchBar\">\n        <input\n          placeholder=\"Enter A Song, Album, or Artist\"\n          onChange={this.handleTermChange}\n        />\n        <button className=\"SearchButton\" onClick={this.search}>\n          SEARCH\n        </button>\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport \"./Track.css\";\n\nexport class Track extends React.Component {\n  constructor(props) {\n    super(props);\n    this.addTrack = this.addTrack.bind(this);\n    this.removeTrack = this.removeTrack.bind(this);\n  }\n  renderAction() {\n    if (this.props.isRemoval) {\n      return (\n        <button onClick={this.removeTrack} className=\"Track-action\">\n          -\n        </button>\n      );\n    } else {\n      return (\n        <button onClick={this.addTrack} className=\"Track-action\">\n          +\n        </button>\n      );\n    }\n  }\n\n  addTrack() {\n    this.props.onAdd(this.props.track);\n  }\n  removeTrack() {\n    this.props.onRemove(this.props.track);\n  }\n\n  render() {\n    return (\n      <div className=\"Track\">\n        <div className=\"Track-information\">\n          <h3> {this.props.track.Name} </h3>\n          <p>\n            {\" \"}\n            {this.props.track.Artist} | {this.props.track.Album}{\" \"}\n          </p>\n        </div>\n        {this.renderAction()}\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport \"./TrackList.css\";\n\nimport { Track } from \"../Track/Track\";\n\nexport class TrackList extends React.Component {\n  render() {\n    return (\n      <div className=\"TrackList\">\n        {this.props.tracks.map((track) => {\n          return (\n            <Track\n              key={track.ID}\n              track={track}\n              onAdd={this.props.onAdd}\n              isRemoval={this.props.isRemoval}\n              onRemove={this.props.onRemove}\n            />\n          );\n        })}\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport \"./SearchResults.css\";\n\nimport { TrackList } from \"../TrackList/TrackList\";\n\nexport class SearchResults extends React.Component {\n  render() {\n    return (\n      <div className=\"SearchResults\">\n        <h2>Results</h2>\n        <TrackList\n          onAdd={this.props.onAdd}\n          tracks={this.props.searchResults}\n          isRemoval={false}\n        />\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport \"./Playlist.css\";\n\nimport { TrackList } from \"../TrackList/TrackList\";\n\nexport class Playlist extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleNameChange = this.handleNameChange.bind(this);\n  }\n\n  handleNameChange(e) {\n    const name = e.target.value;\n    this.props.onNameChange(name);\n  }\n\n  render() {\n    return (\n      <div className=\"Playlist\">\n        <input onChange={this.handleNameChange} defaultValue={\"New Playlist\"} />\n        <TrackList\n          isRemoval={true}\n          onRemove={this.props.onRemove}\n          tracks={this.props.playlistTracks}\n        />\n        <button className=\"Playlist-save\" onClick={this.props.onSave}>\n          SAVE TO SPOTIFY\n        </button>\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport \"./App.css\";\n\nimport { SearchBar } from \"../SearchBar/SearchBar\";\nimport { SearchResults } from \"../SearchResults/SearchResults\";\nimport { Playlist } from \"../Playlist/Playlist\";\nimport Spotify from \"../../util/Spotify\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      searchResults: [],\n      playlistName: \"New Playlist\",\n      playlistTracks: [],\n    };\n\n    this.addTrack = this.addTrack.bind(this);\n    this.removeTrack = this.removeTrack.bind(this);\n    this.updatePlaylistName = this.updatePlaylistName.bind(this);\n    this.savePlaylist = this.savePlaylist.bind(this);\n    this.search = this.search.bind(this);\n  }\n\n  addTrack(track) {\n    let tracks = this.state.playlistTracks;\n    if (tracks.find((element_in_object) => element_in_object.ID === track.ID)) {\n      return;\n    } else {\n      tracks.push(track);\n      this.setState({\n        playlistTracks: tracks,\n      });\n    }\n  }\n\n  removeTrack(track) {\n    let tracks = this.state.playlistTracks;\n    if (tracks.find((element_in_object) => element_in_object.ID === track.ID)) {\n      tracks.pop(track);\n      this.setState({\n        playlistTracks: tracks,\n      });\n    } else {\n      return;\n    }\n  }\n\n  updatePlaylistName(name) {\n    this.setState({\n      playlistName: name,\n    });\n  }\n\n  savePlaylist() {\n    const trackUris = this.state.playlistTracks.map((track) => track.URI);\n    Spotify.savePlaylist(this.state.playlistName, trackUris)\n      .then(() => {\n        this.setState({\n          playlistName: \"New Playlist\",\n          playlistTracks: [],\n        });\n      })\n      .catch(console.log(\"damn\"));\n  }\n\n  search(term) {\n    Spotify.search(term).then((searchResults) => {\n      this.setState({\n        searchResults: searchResults,\n      });\n    });\n  }\n\n  render() {\n    return (\n      <div>\n        <h1>\n          Ha<span className=\"highlight\">riu</span>sh\n        </h1>\n        <div className=\"App\">\n          <SearchBar onSearch={this.search} />\n          <div className=\"App-playlist\">\n            <SearchResults\n              onAdd={this.addTrack}\n              searchResults={this.state.searchResults}\n            />\n            <Playlist\n              onSave={this.savePlaylist}\n              onNameChange={this.updatePlaylistName}\n              onRemove={this.removeTrack}\n              playlistName={this.state.playlistName}\n              playlistTracks={this.state.playlistTracks}\n            />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Components/App/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}